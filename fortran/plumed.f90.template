! vim:ft=fortran
#! Process this file with `fypp plumed.f90.template > plumed.f90`
#: set types = ["integer","real"]
#: set kinds = { "integer":["c_int","c_short","c_long"], "real":["c_float","c_double","c_long_double"] }
#: set maxrank = 4

#:def ranksuffix(RANK)
$:'' if RANK == 0 else '(' + ':' + ',:' * (RANK - 1) + ')'
#:enddef ranksuffix

#:def cname(name)
$:name.replace("c_","")
#:enddef cname

module plumed_module
  use iso_c_binding
  implicit none

  private
  public :: plumed_f_create
  public :: plumed_f_create_dlopen
  public :: plumed_f_create_reference
  public :: plumed_f_create_invalid
  public :: plumed_f_cmd
  public :: plumed_f_finalize
  public :: plumed_f_installed
  public :: plumed_f_valid
  public :: plumed_f_use_count
  public :: plumed_f_global
  public :: plumed_f_ginitialized
  public :: plumed_f_gcreate
  public :: plumed_f_gcmd
  public :: plumed_f_gfinalize
  public :: plumed_f_gvalid

  interface
    subroutine plumed_f_create(c) bind(C)
      import
      character(kind=c_char), intent(out) :: c(32)
    end subroutine plumed_f_create
  end interface

  interface
    subroutine plumed_f_create_dlopen(path,c) bind(C)
      import
      character(kind=c_char), intent(in)  :: path(*)
      character(kind=c_char), intent(out) :: c(32)
    end subroutine plumed_f_create_dlopen
  end interface

  interface
    subroutine plumed_f_create_reference(r,c) bind(C)
      import
      character(kind=c_char), intent(in)  :: r(32)
      character(kind=c_char), intent(out) :: c(32)
    end subroutine plumed_f_create_reference
  end interface

  interface
    subroutine plumed_f_create_invalid(c) bind(C)
      import
      character(kind=c_char), intent(out) :: c(32)
    end subroutine plumed_f_create_invalid
  end interface

  interface
    subroutine plumed_f_finalize(c) bind(C)
      import
      character(kind=c_char), intent(in) :: c(32)
    end subroutine plumed_f_finalize
  end interface

  interface
    subroutine plumed_f_installed(i) bind(C)
      import
      integer(kind=c_int), intent(out) :: i
    end subroutine plumed_f_installed
  end interface

  interface
    subroutine plumed_f_valid(c,i) bind(C)
      import
      character(kind=c_char), intent(in) :: c(32)
      integer(kind=c_int),    intent(out) :: i
    end subroutine plumed_f_valid
  end interface

  interface
    subroutine plumed_f_use_count(c,i) bind(C)
      import
      character(kind=c_char), intent(in)  :: c(32)
      integer(kind=c_int),    intent(out) :: i
    end subroutine plumed_f_use_count
  end interface

  interface
    subroutine plumed_f_global(c) bind(C)
      import
      character(kind=c_char), intent(out) :: c(32)
    end subroutine plumed_f_global
  end interface 

  interface
    subroutine plumed_f_ginitialized(i) bind(C)
      import
      integer(kind=c_int), intent(out) :: i
    end subroutine plumed_f_ginitialized
  end interface

  interface
    subroutine plumed_f_gcreate() bind(C)
    end subroutine plumed_f_gcreate
  end interface
  
  interface
    subroutine plumed_f_gfinalize() bind(C)
    end subroutine plumed_f_gfinalize
  end interface

  interface
    subroutine plumed_f_gvalid(i) bind(C)
      import
      integer(kind=c_int),    intent(out) :: i
    end subroutine plumed_f_gvalid
  end interface

  interface
    subroutine plumed_f_cmd_safe_char(p,key,val,pass_shape) bind(C)
      import
      character(kind=c_char), intent(in)    :: p(32)
      character(kind=c_char), intent(in)    :: key(*)
      character(kind=c_char)                :: val(*)
      integer(kind=c_size_t) :: pass_shape(*)
    end subroutine plumed_f_cmd_safe_char
  end interface

  interface
    subroutine plumed_f_gcmd_safe_char(key,val,pass_shape) bind(C)
      import
      character(kind=c_char), intent(in)    :: key(*)
      character(kind=c_char)                :: val(*)
      integer(kind=c_size_t) :: pass_shape(*)
    end subroutine plumed_f_gcmd_safe_char
  end interface

  interface plumed_f_cmd
    module procedure plumed_f_cmd_char
#: for t in types
#: for ik in range(len(kinds[t]))
#: for r in range(maxrank+1)
    module procedure plumed_f_cmd_${t}$_${ik}$_${r}$
#: endfor
#: endfor
#: endfor
  end interface plumed_f_cmd

  interface plumed_f_gcmd
    module procedure plumed_f_gcmd_char
#: for t in types
#: for ik in range(len(kinds[t]))
#: for r in range(maxrank+1)
    module procedure plumed_f_gcmd_${t}$_${ik}$_${r}$
#: endfor
#: endfor
#: endfor
  end interface plumed_f_gcmd

#: for t in types
#: for k in kinds[t]
  interface
    subroutine plumed_f_cmd_safe_${cname(k)}$_scalar(p,key,val,pass_shape) bind(C)
      import
      character(kind=c_char), intent(in)    :: p(32)
      character(kind=c_char), intent(in)    :: key(*)
      ${t}$(kind=${k}$)                           :: val
      integer(kind=c_size_t) :: pass_shape(*)
    end subroutine plumed_f_cmd_safe_${cname(k)}$_scalar
  end interface
  interface
    subroutine plumed_f_cmd_safe_${cname(k)}$(p,key,val,pass_shape) bind(C)
      import
      character(kind=c_char), intent(in)    :: p(32)
      character(kind=c_char), intent(in)    :: key(*)
      ${t}$(kind=${k}$)                           :: val(*)
      integer(kind=c_size_t) :: pass_shape(*)
    end subroutine plumed_f_cmd_safe_${cname(k)}$
  end interface
  interface
    subroutine plumed_f_gcmd_safe_${cname(k)}$_scalar(key,val,pass_shape) bind(C)
      import
      character(kind=c_char), intent(in)    :: key(*)
      ${t}$(kind=${k}$)                           :: val
      integer(kind=c_size_t) :: pass_shape(*)
    end subroutine plumed_f_gcmd_safe_${cname(k)}$_scalar
  end interface
  interface
    subroutine plumed_f_gcmd_safe_${cname(k)}$(key,val,pass_shape) bind(C)
      import
      character(kind=c_char), intent(in)    :: key(*)
      ${t}$(kind=${k}$)                           :: val(*)
      integer(kind=c_size_t) :: pass_shape(*)
    end subroutine plumed_f_gcmd_safe_${cname(k)}$
  end interface
#: endfor
#: endfor

  contains

     subroutine plumed_f_cmd_char(p,key,val)
       character(kind=c_char,len=32), intent(in)    :: p
       character(kind=c_char,len=*),  intent(in)    :: key
       character(kind=c_char,len=*), asynchronous   :: val
       integer(kind=c_size_t) :: pass_shape(2)
       pass_shape=(/len(val),0/)
       call plumed_f_cmd_safe_char(p,key,val,pass_shape)
     end subroutine plumed_f_cmd_char

     subroutine plumed_f_gcmd_char(key,val)
       character(kind=c_char,len=*),  intent(in)    :: key
       character(kind=c_char,len=*), asynchronous   :: val
       integer(kind=c_size_t) :: pass_shape(2)
       pass_shape=(/len(val),0/)
       call plumed_f_gcmd_safe_char(key,val,pass_shape)
     end subroutine plumed_f_gcmd_char

#: for t in types
#: for ik in range(len(kinds[t]))
#: set k = kinds[t][ik]
#: for r in range(maxrank+1)
    subroutine plumed_f_cmd_${t}$_${ik}$_${r}$(p,key,val)
      character(kind=c_char,len=32), intent(in)    :: p
      character(kind=c_char,len=*),  intent(in)    :: key
      ${t}$(KIND=${k}$), asynchronous              :: val${ranksuffix(r)}$
#: if r==0
      integer(kind=c_size_t) :: pass_shape(2)
      pass_shape=(/1,0/)
      call plumed_f_cmd_safe_${cname(k)}$_scalar(p,key,val,pass_shape)
#: else
      integer(kind=c_size_t) :: pass_shape(${r+1}$)
#: for rr in range(r)
      pass_shape(${rr+1}$)=size(val,${r-rr}$)
#: endfor
      pass_shape(${r+1}$)=0
      call plumed_f_cmd_safe_${cname(k)}$(p,key,val,pass_shape)
#: endif
    end subroutine plumed_f_cmd_${t}$_${ik}$_${r}$
    subroutine plumed_f_gcmd_${t}$_${ik}$_${r}$(key,val)
      character(kind=c_char,len=*),  intent(in)    :: key
      ${t}$(kind=${k}$), asynchronous              :: val${ranksuffix(r)}$
#: if r==0
      integer(kind=c_size_t) :: pass_shape(2)
      pass_shape=(/1,0/)
      call plumed_f_gcmd_safe_${cname(k)}$_scalar(key,val,pass_shape)
#: else
      integer(kind=c_size_t) :: pass_shape(${r+1}$)
#: for rr in range(r)
      pass_shape(${rr+1}$)=size(val,${r-rr}$)
#: endfor
      pass_shape(${r+1}$)=0
      call plumed_f_gcmd_safe_${cname(k)}$(key,val,pass_shape)
#: endif
    end subroutine plumed_f_gcmd_${t}$_${ik}$_${r}$
#: endfor
#: endfor
#: endfor

end module plumed_module

